package prototype.user;

import java.io.IOException;
import java.rmi.NotBoundException;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.List;
import java.util.Map;

import newNetwork.Connection;


public interface IUser extends Remote {
	
	/**
	 * logs in the user .The user fetch the login information from config file
	 * @throws IOException
	 * @throws NotBoundException
	 * @throws RemoteException
	 */
	//public boolean login(String username, String password) throws IOException, NotBoundException,RemoteException;
	public String login(String username, String password) throws IOException, NotBoundException,RemoteException;
	/**
	 * uploads data to serviceInstance from AppId using ConnectionType type
	 * @param data
	 * @param type
	 * @param AppId
	 * @param serviceInstance
	 * @return
	 * @throws RemoteException
	 */
	public String upload(String data,Connection.Type type,int AppId,String serviceInstance, String userId) throws RemoteException;
	/**
	 * uploads data to a network cache from AppId using ConnectionType type
	 * @param data - content object to be uploaded.
	 * @param type - the connection Type over which Data should be uploaded.
	 * @param AppId - ApplicationId
	 * @return - contenId generated by the network.
	 * @throws RemoteException
	 */
	public String upload(String data,Connection.Type type,int AppId) throws RemoteException;
	/**
	 * uploads Dynamic Content Object named as contentId.
	 * @param AppId 
	 * @param contentId - content object to be uploaded.
	 * @param uploadType - ConnectionType over which the conten should be uploaded
	 * @param downloadType - ConnectionType over which the Dynamic Content should be replies.
	 * @param destination 
	 * @return - ContentId of the object dynamically created by the destination.
	 * @throws RemoteException
	 */
	public String processDynamicContent(int AppId,String contentId,Connection.Type uploadType,Connection.Type downloadType,String destination) throws RemoteException;
	/**
	 * downloads data over ConnectionType type 
	 * @param data - contentId of the data requested
	 * @param type - ConnectionType over which the Data is requested
	 * @param AppId
	 * @throws RemoteException
	 */
	//public void find(String data,Connection.Type type,int AppId) throws RemoteException;
	public void find(String data,Connection.Type type,int AppId, String userId) throws RemoteException;
	/**
	 * receives the uploadsAcks,i.e. List of the contentIds which has been successfully uploaded to dataserver. 
	 * @param AppId
	 * @return
	 * @throws RemoteException
	 */
	public List<String> getUploadList() throws RemoteException;
	/**
	 * receives the information of finished downloads.
	 * @param AppId
	 * @return
	 * @throws RemoteException
	 */
	public List<String> getDownloadList(int AppId) throws RemoteException;
	/**
	 * Returns the AppId
	 * @throws RemoteException
	 */
	public int getAppId()throws RemoteException ;
	/**
	 * Update the TCPUploadRequest property
	 */
	public void uploadStatus(String name) throws RemoteException ;
	/**
	 * logs out the user
	 * @throws RemoteException
	 */
	//public void logout() throws RemoteException;
	public void logout(String user) throws RemoteException;
	public List<Integer> getUploadAcks (String contentName, int size) throws RemoteException;
	public boolean registration(Map<String, String> userInfo) throws RemoteException ;
	public boolean updateLog(List<String> str) throws RemoteException ;
	public boolean updateLog(String name,List<String> str) throws RemoteException ;
	public boolean delete(String contentId,String userName) throws RemoteException ;
	public boolean uploadImg(String imgName) throws RemoteException ;
}